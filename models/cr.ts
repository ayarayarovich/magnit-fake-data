/* tslint:disable */
/* eslint-disable */


/**
 * AUTO-GENERATED FILE - DO NOT EDIT!
 *
 * This file was automatically generated by pg-to-ts v.4.1.1
 * $ pg-to-ts generate -c postgresql://username:password@magnit-db.ayarayarovich.ru:5432/magnit -t categories_of_goods -t company_head_offices -t countries -t distribution_centres -t expenditure_goods -t expenditure_records -t good_write_off_reasons -t goods -t goods_in_local_storages -t goods_in_reception -t inventory -t invoice_goods -t invoices -t noncompliance_report -t producers -t reception_of_goods -t reception_status -t sales_floor_income_goods -t sales_floor_incomes -t sales_floors -t storage_spaces -t storage_types -t store_category_changes -t store_local_storage -t stores -t subdivisions -t supply_agreement_goods -t supply_agreements -t transportation_document_goods -t transportation_documents -t trucks -s commodity_research
 *
 */


export type Json = unknown;

// Table categories_of_goods
export interface CategoriesOfGoods {
  id_category: number;
  category_name: string | null;
  max_fluctuation_in_perc: number | null;
}
export interface CategoriesOfGoodsInput {
  id_category?: number;
  category_name?: string | null;
  max_fluctuation_in_perc?: number | null;
}
const categories_of_goods = {
  tableName: 'categories_of_goods',
  columns: ['id_category', 'category_name', 'max_fluctuation_in_perc'],
  requiredForInsert: [],
  primaryKey: 'id_category',
  foreignKeys: {},
  $type: null as unknown as CategoriesOfGoods,
  $input: null as unknown as CategoriesOfGoodsInput
} as const;

// Table company_head_offices
export interface CompanyHeadOffices {
  id_office: number;
  office_name: string | null;
  address: string | null;
  id_director: number | null;
}
export interface CompanyHeadOfficesInput {
  id_office?: number;
  office_name?: string | null;
  address?: string | null;
  id_director?: number | null;
}
const company_head_offices = {
  tableName: 'company_head_offices',
  columns: ['id_office', 'office_name', 'address', 'id_director'],
  requiredForInsert: [],
  primaryKey: 'id_office',
  foreignKeys: { id_director: { table: 'employees', column: 'employee_id', $type: null as unknown /* employees */ }, },
  $type: null as unknown as CompanyHeadOffices,
  $input: null as unknown as CompanyHeadOfficesInput
} as const;

// Table countries
export interface Countries {
  id_country: number;
  country_name: string | null;
}
export interface CountriesInput {
  id_country: number;
  country_name?: string | null;
}
const countries = {
  tableName: 'countries',
  columns: ['id_country', 'country_name'],
  requiredForInsert: ['id_country'],
  primaryKey: 'id_country',
  foreignKeys: {},
  $type: null as unknown as Countries,
  $input: null as unknown as CountriesInput
} as const;

// Table distribution_centres
export interface DistributionCentres {
  id_distribution_centre: number;
  centre_name: string | null;
  centre_address: string | null;
  total_area: number | null;
  refrigerator_amount: number | null;
  shelf_amount: number | null;
  merchandiser_amount: number | null;
  loader_amount: number | null;
  storeman_amount: number | null;
  id_centre_director: number | null;
  total_spaces: number | null;
}
export interface DistributionCentresInput {
  id_distribution_centre?: number;
  centre_name?: string | null;
  centre_address?: string | null;
  total_area?: number | null;
  refrigerator_amount?: number | null;
  shelf_amount?: number | null;
  merchandiser_amount?: number | null;
  loader_amount?: number | null;
  storeman_amount?: number | null;
  id_centre_director?: number | null;
  total_spaces?: number | null;
}
const distribution_centres = {
  tableName: 'distribution_centres',
  columns: ['id_distribution_centre', 'centre_name', 'centre_address', 'total_area', 'refrigerator_amount', 'shelf_amount', 'merchandiser_amount', 'loader_amount', 'storeman_amount', 'id_centre_director', 'total_spaces'],
  requiredForInsert: [],
  primaryKey: 'id_distribution_centre',
  foreignKeys: { id_centre_director: { table: 'employees', column: 'employee_id', $type: null as unknown /* employees */ }, },
  $type: null as unknown as DistributionCentres,
  $input: null as unknown as DistributionCentresInput
} as const;

// Table expenditure_goods
export interface ExpenditureGoods {
  id_expenditure_record: number | null;
  barcode: number | null;
  quantity: number | null;
}
export interface ExpenditureGoodsInput {
  id_expenditure_record?: number | null;
  barcode?: number | null;
  quantity?: number | null;
}
const expenditure_goods = {
  tableName: 'expenditure_goods',
  columns: ['id_expenditure_record', 'barcode', 'quantity'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: { barcode: { table: 'goods', column: 'barcode', $type: null as unknown as Goods }, },
  $type: null as unknown as ExpenditureGoods,
  $input: null as unknown as ExpenditureGoodsInput
} as const;

// Table expenditure_records
export interface ExpenditureRecords {
  id_expenditure_record: number;
  id_storage_space: number | null;
  id_write_off_reason: number | null;
  record_date: Date | null;
}
export interface ExpenditureRecordsInput {
  id_expenditure_record?: number;
  id_storage_space?: number | null;
  id_write_off_reason?: number | null;
  record_date?: Date | null;
}
const expenditure_records = {
  tableName: 'expenditure_records',
  columns: ['id_expenditure_record', 'id_storage_space', 'id_write_off_reason', 'record_date'],
  requiredForInsert: [],
  primaryKey: 'id_expenditure_record',
  foreignKeys: {
    id_storage_space: { table: 'storage_spaces', column: 'id_storage_space', $type: null as unknown as StorageSpaces },
    id_write_off_reason: { table: 'good_write_off_reasons', column: 'id_reason', $type: null as unknown as GoodWriteOffReasons },
  },
  $type: null as unknown as ExpenditureRecords,
  $input: null as unknown as ExpenditureRecordsInput
} as const;

// Table good_write_off_reasons
export interface GoodWriteOffReasons {
  id_reason: number;
  reason_name: string | null;
  description: string | null;
}
export interface GoodWriteOffReasonsInput {
  id_reason?: number;
  reason_name?: string | null;
  description?: string | null;
}
const good_write_off_reasons = {
  tableName: 'good_write_off_reasons',
  columns: ['id_reason', 'reason_name', 'description'],
  requiredForInsert: [],
  primaryKey: 'id_reason',
  foreignKeys: {},
  $type: null as unknown as GoodWriteOffReasons,
  $input: null as unknown as GoodWriteOffReasonsInput
} as const;

// Table goods
export interface Goods {
  barcode: number;
  name: string | null;
  unit_of_measurement: string | null;
  volume_in_units: number | null;
  weight_in_kg: number | null;
  exp_date: number | null;
  id_category: number | null;
  id_producer: number | null;
}
export interface GoodsInput {
  barcode: number;
  name?: string | null;
  unit_of_measurement?: string | null;
  volume_in_units?: number | null;
  weight_in_kg?: number | null;
  exp_date?: number | null;
  id_category?: number | null;
  id_producer?: number | null;
}
const goods = {
  tableName: 'goods',
  columns: ['barcode', 'name', 'unit_of_measurement', 'volume_in_units', 'weight_in_kg', 'exp_date', 'id_category', 'id_producer'],
  requiredForInsert: ['barcode'],
  primaryKey: 'barcode',
  foreignKeys: {
    id_category: { table: 'categories_of_goods', column: 'id_category', $type: null as unknown as CategoriesOfGoods },
    id_producer: { table: 'producers', column: 'id_producer', $type: null as unknown as Producers },
  },
  $type: null as unknown as Goods,
  $input: null as unknown as GoodsInput
} as const;

// Table goods_in_local_storages
export interface GoodsInLocalStorages {
  barcode: number | null;
  id_reception: number | null;
  id_storage_space: number | null;
  exp_date: Date | null;
  entry_price: number | null;
}
export interface GoodsInLocalStoragesInput {
  barcode?: number | null;
  id_reception?: number | null;
  id_storage_space?: number | null;
  exp_date?: Date | null;
  entry_price?: number | null;
}
const goods_in_local_storages = {
  tableName: 'goods_in_local_storages',
  columns: ['barcode', 'id_reception', 'id_storage_space', 'exp_date', 'entry_price'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {
    barcode: { table: 'goods', column: 'barcode', $type: null as unknown as Goods },
    id_reception: { table: 'reception_of_goods', column: 'id_reception', $type: null as unknown as ReceptionOfGoods },
    id_storage_space: { table: 'storage_spaces', column: 'id_storage_space', $type: null as unknown as StorageSpaces },
  },
  $type: null as unknown as GoodsInLocalStorages,
  $input: null as unknown as GoodsInLocalStoragesInput
} as const;

// Table goods_in_reception
export interface GoodsInReception {
  id_reception: number | null;
  barcode: number | null;
  id_reception_status: number | null;
  quantity: number | null;
}
export interface GoodsInReceptionInput {
  id_reception?: number | null;
  barcode?: number | null;
  id_reception_status?: number | null;
  quantity?: number | null;
}
const goods_in_reception = {
  tableName: 'goods_in_reception',
  columns: ['id_reception', 'barcode', 'id_reception_status', 'quantity'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {
    id_reception: { table: 'reception_of_goods', column: 'id_reception', $type: null as unknown as ReceptionOfGoods },
    barcode: { table: 'goods', column: 'barcode', $type: null as unknown as Goods },
    id_reception_status: { table: 'reception_status', column: 'id_status', $type: null as unknown as ReceptionStatus },
  },
  $type: null as unknown as GoodsInReception,
  $input: null as unknown as GoodsInReceptionInput
} as const;

// Table inventory
export interface Inventory {
  inventory_id: number;
  date_performed: Date | null;
  inspector_id: number | null;
  store_id: number | null;
  inventory_success: boolean | null;
}
export interface InventoryInput {
  inventory_id?: number;
  date_performed?: Date | null;
  inspector_id?: number | null;
  store_id?: number | null;
  inventory_success?: boolean | null;
}
const inventory = {
  tableName: 'inventory',
  columns: ['inventory_id', 'date_performed', 'inspector_id', 'store_id', 'inventory_success'],
  requiredForInsert: [],
  primaryKey: 'inventory_id',
  foreignKeys: {
    inspector_id: { table: 'employees', column: 'employee_id', $type: null as unknown /* employees */ },
    store_id: { table: 'stores', column: 'id_store', $type: null as unknown as Stores },
  },
  $type: null as unknown as Inventory,
  $input: null as unknown as InventoryInput
} as const;

// Table invoice_goods
export interface InvoiceGoods {
  id_invoice: number;
  barcode: number;
  amount: number | null;
}
export interface InvoiceGoodsInput {
  id_invoice: number;
  barcode: number;
  amount?: number | null;
}
const invoice_goods = {
  tableName: 'invoice_goods',
  columns: ['id_invoice', 'barcode', 'amount'],
  requiredForInsert: ['id_invoice', 'barcode'],
  primaryKey: 'id_invoice',
  foreignKeys: {
    id_invoice: { table: 'invoices', column: 'id_invoice', $type: null as unknown as Invoices },
    barcode: { table: 'goods', column: 'barcode', $type: null as unknown as Goods },
  },
  $type: null as unknown as InvoiceGoods,
  $input: null as unknown as InvoiceGoodsInput
} as const;

// Table invoices
export interface Invoices {
  id_invoice: number;
  id_agreement: number | null;
  creation_date: Date | null;
  shipping_address: string | null;
  id_subdivision: number | null;
  transport_number: string | null;
  sender_lastname: string | null;
  sender_firstname: string | null;
  sender_middlename: string | null;
  id_recipient: number | null;
  sent_sum: number | null;
  received_sum: number | null;
}
export interface InvoicesInput {
  id_invoice?: number;
  id_agreement?: number | null;
  creation_date?: Date | null;
  shipping_address?: string | null;
  id_subdivision?: number | null;
  transport_number?: string | null;
  sender_lastname?: string | null;
  sender_firstname?: string | null;
  sender_middlename?: string | null;
  id_recipient?: number | null;
  sent_sum?: number | null;
  received_sum?: number | null;
}
const invoices = {
  tableName: 'invoices',
  columns: ['id_invoice', 'id_agreement', 'creation_date', 'shipping_address', 'id_subdivision', 'transport_number', 'sender_lastname', 'sender_firstname', 'sender_middlename', 'id_recipient', 'sent_sum', 'received_sum'],
  requiredForInsert: [],
  primaryKey: 'id_invoice',
  foreignKeys: {
    id_agreement: { table: 'supply_agreements', column: 'id_agreement', $type: null as unknown as SupplyAgreements },
    id_subdivision: { table: 'subdivisions', column: 'id_subdivision', $type: null as unknown as Subdivisions },
    id_recipient: { table: 'employees', column: 'employee_id', $type: null as unknown /* employees */ },
  },
  $type: null as unknown as Invoices,
  $input: null as unknown as InvoicesInput
} as const;

// Table noncompliance_report
export interface NoncomplianceReport {
  report_id: number;
  inventory_id: number | null;
  report_date: Date | null;
  product_barcode: number | null;
  problem_description: string | null;
}
export interface NoncomplianceReportInput {
  report_id?: number;
  inventory_id?: number | null;
  report_date?: Date | null;
  product_barcode?: number | null;
  problem_description?: string | null;
}
const noncompliance_report = {
  tableName: 'noncompliance_report',
  columns: ['report_id', 'inventory_id', 'report_date', 'product_barcode', 'problem_description'],
  requiredForInsert: [],
  primaryKey: 'report_id',
  foreignKeys: { inventory_id: { table: 'inventory', column: 'inventory_id', $type: null as unknown as Inventory }, },
  $type: null as unknown as NoncomplianceReport,
  $input: null as unknown as NoncomplianceReportInput
} as const;

// Table producers
export interface Producers {
  producer_name: string | null;
  id_producer_country: number | null;
  inn: number | null;
  ogrn: number | null;
  legal_address: string | null;
  factual_address: string | null;
  phone_number: string | null;
  email: string | null;
  id_contact_person: number | null;
  id_producer: number;
}
export interface ProducersInput {
  producer_name?: string | null;
  id_producer_country?: number | null;
  inn?: number | null;
  ogrn?: number | null;
  legal_address?: string | null;
  factual_address?: string | null;
  phone_number?: string | null;
  email?: string | null;
  id_contact_person?: number | null;
  id_producer?: number;
}
const producers = {
  tableName: 'producers',
  columns: ['producer_name', 'id_producer_country', 'inn', 'ogrn', 'legal_address', 'factual_address', 'phone_number', 'email', 'id_contact_person', 'id_producer'],
  requiredForInsert: [],
  primaryKey: 'id_producer',
  foreignKeys: { id_producer_country: { table: 'countries', column: 'id_country', $type: null as unknown as Countries }, },
  $type: null as unknown as Producers,
  $input: null as unknown as ProducersInput
} as const;

// Table reception_of_goods
export interface ReceptionOfGoods {
  id_reception: number;
  id_subdivision: number | null;
  id_document: number | null;
  id_merchandiser: number | null;
  reception_date: Date | null;
}
export interface ReceptionOfGoodsInput {
  id_reception?: number;
  id_subdivision?: number | null;
  id_document?: number | null;
  id_merchandiser?: number | null;
  reception_date?: Date | null;
}
const reception_of_goods = {
  tableName: 'reception_of_goods',
  columns: ['id_reception', 'id_subdivision', 'id_document', 'id_merchandiser', 'reception_date'],
  requiredForInsert: [],
  primaryKey: 'id_reception',
  foreignKeys: {
    id_subdivision: { table: 'subdivisions', column: 'id_subdivision', $type: null as unknown as Subdivisions },
    id_document: { table: 'transportation_documents', column: 'id_transportation_document', $type: null as unknown as TransportationDocuments },
    id_merchandiser: { table: 'employees', column: 'employee_id', $type: null as unknown /* employees */ },
  },
  $type: null as unknown as ReceptionOfGoods,
  $input: null as unknown as ReceptionOfGoodsInput
} as const;

// Table reception_status
export interface ReceptionStatus {
  id_status: number;
  status_name: string | null;
  status_description: string | null;
}
export interface ReceptionStatusInput {
  id_status?: number;
  status_name?: string | null;
  status_description?: string | null;
}
const reception_status = {
  tableName: 'reception_status',
  columns: ['id_status', 'status_name', 'status_description'],
  requiredForInsert: [],
  primaryKey: 'id_status',
  foreignKeys: {},
  $type: null as unknown as ReceptionStatus,
  $input: null as unknown as ReceptionStatusInput
} as const;

// Table sales_floor_income_goods
export interface SalesFloorIncomeGoods {
  id_income: number;
  barcode: number | null;
  quantity: number | null;
}
export interface SalesFloorIncomeGoodsInput {
  id_income: number;
  barcode?: number | null;
  quantity?: number | null;
}
const sales_floor_income_goods = {
  tableName: 'sales_floor_income_goods',
  columns: ['id_income', 'barcode', 'quantity'],
  requiredForInsert: ['id_income'],
  primaryKey: 'id_income',
  foreignKeys: {
    id_income: { table: 'sales_floor_incomes', column: 'id_income', $type: null as unknown as SalesFloorIncomes },
    barcode: { table: 'goods', column: 'barcode', $type: null as unknown as Goods },
  },
  $type: null as unknown as SalesFloorIncomeGoods,
  $input: null as unknown as SalesFloorIncomeGoodsInput
} as const;

// Table sales_floor_incomes
export interface SalesFloorIncomes {
  id_income: number;
  id_storage_space: number | null;
}
export interface SalesFloorIncomesInput {
  id_income?: number;
  id_storage_space?: number | null;
}
const sales_floor_incomes = {
  tableName: 'sales_floor_incomes',
  columns: ['id_income', 'id_storage_space'],
  requiredForInsert: [],
  primaryKey: 'id_income',
  foreignKeys: { id_storage_space: { table: 'storage_spaces', column: 'id_storage_space', $type: null as unknown as StorageSpaces }, },
  $type: null as unknown as SalesFloorIncomes,
  $input: null as unknown as SalesFloorIncomesInput
} as const;

// Table sales_floors
export interface SalesFloors {
  id_sales_floor: number;
  id_subdivision: number | null;
  total_spaces: number | null;
}
export interface SalesFloorsInput {
  id_sales_floor?: number;
  id_subdivision?: number | null;
  total_spaces?: number | null;
}
const sales_floors = {
  tableName: 'sales_floors',
  columns: ['id_sales_floor', 'id_subdivision', 'total_spaces'],
  requiredForInsert: [],
  primaryKey: 'id_sales_floor',
  foreignKeys: { id_subdivision: { table: 'subdivisions', column: 'id_subdivision', $type: null as unknown as Subdivisions }, },
  $type: null as unknown as SalesFloors,
  $input: null as unknown as SalesFloorsInput
} as const;

// Table storage_spaces
export interface StorageSpaces {
  id_storage_space: number;
  id_subdivision: number | null;
  id_storage_type: number | null;
  availability: boolean | null;
}
export interface StorageSpacesInput {
  id_storage_space?: number;
  id_subdivision?: number | null;
  id_storage_type?: number | null;
  availability?: boolean | null;
}
const storage_spaces = {
  tableName: 'storage_spaces',
  columns: ['id_storage_space', 'id_subdivision', 'id_storage_type', 'availability'],
  requiredForInsert: [],
  primaryKey: 'id_storage_space',
  foreignKeys: {
    id_subdivision: { table: 'subdivisions', column: 'id_subdivision', $type: null as unknown as Subdivisions },
    id_storage_type: { table: 'storage_types', column: 'id_storage_type', $type: null as unknown as StorageTypes },
  },
  $type: null as unknown as StorageSpaces,
  $input: null as unknown as StorageSpacesInput
} as const;

// Table storage_types
export interface StorageTypes {
  id_storage_type: number;
  type_name: string | null;
  description: string | null;
}
export interface StorageTypesInput {
  id_storage_type?: number;
  type_name?: string | null;
  description?: string | null;
}
const storage_types = {
  tableName: 'storage_types',
  columns: ['id_storage_type', 'type_name', 'description'],
  requiredForInsert: [],
  primaryKey: 'id_storage_type',
  foreignKeys: {},
  $type: null as unknown as StorageTypes,
  $input: null as unknown as StorageTypesInput
} as const;

// Table store_category_changes
export interface StoreCategoryChanges {
  id_category: number;
  id_store: number | null;
  change_date: Date | null;
  change_percent: number | null;
}
export interface StoreCategoryChangesInput {
  id_category?: number;
  id_store?: number | null;
  change_date?: Date | null;
  change_percent?: number | null;
}
const store_category_changes = {
  tableName: 'store_category_changes',
  columns: ['id_category', 'id_store', 'change_date', 'change_percent'],
  requiredForInsert: [],
  primaryKey: 'id_category',
  foreignKeys: { id_store: { table: 'stores', column: 'id_store', $type: null as unknown as Stores }, },
  $type: null as unknown as StoreCategoryChanges,
  $input: null as unknown as StoreCategoryChangesInput
} as const;

// Table store_local_storage
export interface StoreLocalStorage {
  id_local_storage: number;
  id_subdivision: number | null;
  total_spaces: number | null;
}
export interface StoreLocalStorageInput {
  id_local_storage?: number;
  id_subdivision?: number | null;
  total_spaces?: number | null;
}
const store_local_storage = {
  tableName: 'store_local_storage',
  columns: ['id_local_storage', 'id_subdivision', 'total_spaces'],
  requiredForInsert: [],
  primaryKey: 'id_local_storage',
  foreignKeys: { id_subdivision: { table: 'subdivisions', column: 'id_subdivision', $type: null as unknown as Subdivisions }, },
  $type: null as unknown as StoreLocalStorage,
  $input: null as unknown as StoreLocalStorageInput
} as const;

// Table stores
export interface Stores {
  id_store: number;
  store_name: string | null;
  store_address: string | null;
  storeman_amount: number | null;
  merchandiser_amount: number | null;
  seller_amount: number | null;
  id_store_director: number | null;
}
export interface StoresInput {
  id_store?: number;
  store_name?: string | null;
  store_address?: string | null;
  storeman_amount?: number | null;
  merchandiser_amount?: number | null;
  seller_amount?: number | null;
  id_store_director?: number | null;
}
const stores = {
  tableName: 'stores',
  columns: ['id_store', 'store_name', 'store_address', 'storeman_amount', 'merchandiser_amount', 'seller_amount', 'id_store_director'],
  requiredForInsert: [],
  primaryKey: 'id_store',
  foreignKeys: { id_store_director: { table: 'employees', column: 'employee_id', $type: null as unknown /* employees */ }, },
  $type: null as unknown as Stores,
  $input: null as unknown as StoresInput
} as const;

// Table subdivisions
export interface Subdivisions {
  id_subdivision: number;
  description: string | null;
  address: string | null;
}
export interface SubdivisionsInput {
  id_subdivision?: number;
  description?: string | null;
  address?: string | null;
}
const subdivisions = {
  tableName: 'subdivisions',
  columns: ['id_subdivision', 'description', 'address'],
  requiredForInsert: [],
  primaryKey: 'id_subdivision',
  foreignKeys: {},
  $type: null as unknown as Subdivisions,
  $input: null as unknown as SubdivisionsInput
} as const;

// Table supply_agreement_goods
export interface SupplyAgreementGoods {
  id_agreement: number | null;
  barcode: number | null;
  quantity: number | null;
}
export interface SupplyAgreementGoodsInput {
  id_agreement?: number | null;
  barcode?: number | null;
  quantity?: number | null;
}
const supply_agreement_goods = {
  tableName: 'supply_agreement_goods',
  columns: ['id_agreement', 'barcode', 'quantity'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {
    id_agreement: { table: 'supply_agreements', column: 'id_agreement', $type: null as unknown as SupplyAgreements },
    barcode: { table: 'goods', column: 'barcode', $type: null as unknown as Goods },
  },
  $type: null as unknown as SupplyAgreementGoods,
  $input: null as unknown as SupplyAgreementGoodsInput
} as const;

// Table supply_agreements
export interface SupplyAgreements {
  id_agreement: number;
  id_supplier: number | null;
  creation_date: Date | null;
  days_for_fulfilment: number | null;
  total_sum: number | null;
}
export interface SupplyAgreementsInput {
  id_agreement?: number;
  id_supplier?: number | null;
  creation_date?: Date | null;
  days_for_fulfilment?: number | null;
  total_sum?: number | null;
}
const supply_agreements = {
  tableName: 'supply_agreements',
  columns: ['id_agreement', 'id_supplier', 'creation_date', 'days_for_fulfilment', 'total_sum'],
  requiredForInsert: [],
  primaryKey: 'id_agreement',
  foreignKeys: { id_supplier: { table: 'suppliers', column: 'supplier_id', $type: null as unknown /* suppliers */ }, },
  $type: null as unknown as SupplyAgreements,
  $input: null as unknown as SupplyAgreementsInput
} as const;

// Table transportation_document_goods
export interface TransportationDocumentGoods {
  id_transportation_document: number | null;
  barcode: number | null;
  quantity: number | null;
}
export interface TransportationDocumentGoodsInput {
  id_transportation_document?: number | null;
  barcode?: number | null;
  quantity?: number | null;
}
const transportation_document_goods = {
  tableName: 'transportation_document_goods',
  columns: ['id_transportation_document', 'barcode', 'quantity'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: { barcode: { table: 'goods', column: 'barcode', $type: null as unknown as Goods }, },
  $type: null as unknown as TransportationDocumentGoods,
  $input: null as unknown as TransportationDocumentGoodsInput
} as const;

// Table transportation_documents
export interface TransportationDocuments {
  id_transportation_document: number;
  id_distribution_centre: number | null;
  id_truck: number | null;
  id_local_storage: number | null;
  id_sender: number | null;
  id_receiver: number | null;
  shipping_date: Date | null;
}
export interface TransportationDocumentsInput {
  id_transportation_document?: number;
  id_distribution_centre?: number | null;
  id_truck?: number | null;
  id_local_storage?: number | null;
  id_sender?: number | null;
  id_receiver?: number | null;
  shipping_date?: Date | null;
}
const transportation_documents = {
  tableName: 'transportation_documents',
  columns: ['id_transportation_document', 'id_distribution_centre', 'id_truck', 'id_local_storage', 'id_sender', 'id_receiver', 'shipping_date'],
  requiredForInsert: [],
  primaryKey: 'id_transportation_document',
  foreignKeys: {
    id_distribution_centre: { table: 'distribution_centres', column: 'id_distribution_centre', $type: null as unknown as DistributionCentres },
    id_truck: { table: 'trucks', column: 'id_truck', $type: null as unknown as Trucks },
    id_sender: { table: 'employees', column: 'employee_id', $type: null as unknown /* employees */ },
    id_receiver: { table: 'employees', column: 'employee_id', $type: null as unknown /* employees */ },
  },
  $type: null as unknown as TransportationDocuments,
  $input: null as unknown as TransportationDocumentsInput
} as const;

// Table trucks
export interface Trucks {
  id_truck: number;
  transport_number: string | null;
  transport_model: string | null;
  lift_capacity: number | null;
  id_distribution_centre: number | null;
}
export interface TrucksInput {
  id_truck?: number;
  transport_number?: string | null;
  transport_model?: string | null;
  lift_capacity?: number | null;
  id_distribution_centre?: number | null;
}
const trucks = {
  tableName: 'trucks',
  columns: ['id_truck', 'transport_number', 'transport_model', 'lift_capacity', 'id_distribution_centre'],
  requiredForInsert: [],
  primaryKey: 'id_truck',
  foreignKeys: { id_distribution_centre: { table: 'distribution_centres', column: 'id_distribution_centre', $type: null as unknown as DistributionCentres }, },
  $type: null as unknown as Trucks,
  $input: null as unknown as TrucksInput
} as const;


export interface TableTypes {
  categories_of_goods: {
    select: CategoriesOfGoods;
    input: CategoriesOfGoodsInput;
  };
  company_head_offices: {
    select: CompanyHeadOffices;
    input: CompanyHeadOfficesInput;
  };
  countries: {
    select: Countries;
    input: CountriesInput;
  };
  distribution_centres: {
    select: DistributionCentres;
    input: DistributionCentresInput;
  };
  expenditure_goods: {
    select: ExpenditureGoods;
    input: ExpenditureGoodsInput;
  };
  expenditure_records: {
    select: ExpenditureRecords;
    input: ExpenditureRecordsInput;
  };
  good_write_off_reasons: {
    select: GoodWriteOffReasons;
    input: GoodWriteOffReasonsInput;
  };
  goods: {
    select: Goods;
    input: GoodsInput;
  };
  goods_in_local_storages: {
    select: GoodsInLocalStorages;
    input: GoodsInLocalStoragesInput;
  };
  goods_in_reception: {
    select: GoodsInReception;
    input: GoodsInReceptionInput;
  };
  inventory: {
    select: Inventory;
    input: InventoryInput;
  };
  invoice_goods: {
    select: InvoiceGoods;
    input: InvoiceGoodsInput;
  };
  invoices: {
    select: Invoices;
    input: InvoicesInput;
  };
  noncompliance_report: {
    select: NoncomplianceReport;
    input: NoncomplianceReportInput;
  };
  producers: {
    select: Producers;
    input: ProducersInput;
  };
  reception_of_goods: {
    select: ReceptionOfGoods;
    input: ReceptionOfGoodsInput;
  };
  reception_status: {
    select: ReceptionStatus;
    input: ReceptionStatusInput;
  };
  sales_floor_income_goods: {
    select: SalesFloorIncomeGoods;
    input: SalesFloorIncomeGoodsInput;
  };
  sales_floor_incomes: {
    select: SalesFloorIncomes;
    input: SalesFloorIncomesInput;
  };
  sales_floors: {
    select: SalesFloors;
    input: SalesFloorsInput;
  };
  storage_spaces: {
    select: StorageSpaces;
    input: StorageSpacesInput;
  };
  storage_types: {
    select: StorageTypes;
    input: StorageTypesInput;
  };
  store_category_changes: {
    select: StoreCategoryChanges;
    input: StoreCategoryChangesInput;
  };
  store_local_storage: {
    select: StoreLocalStorage;
    input: StoreLocalStorageInput;
  };
  stores: {
    select: Stores;
    input: StoresInput;
  };
  subdivisions: {
    select: Subdivisions;
    input: SubdivisionsInput;
  };
  supply_agreement_goods: {
    select: SupplyAgreementGoods;
    input: SupplyAgreementGoodsInput;
  };
  supply_agreements: {
    select: SupplyAgreements;
    input: SupplyAgreementsInput;
  };
  transportation_document_goods: {
    select: TransportationDocumentGoods;
    input: TransportationDocumentGoodsInput;
  };
  transportation_documents: {
    select: TransportationDocuments;
    input: TransportationDocumentsInput;
  };
  trucks: {
    select: Trucks;
    input: TrucksInput;
  };
}

export const tables = {
  categories_of_goods,
  company_head_offices,
  countries,
  distribution_centres,
  expenditure_goods,
  expenditure_records,
  good_write_off_reasons,
  goods,
  goods_in_local_storages,
  goods_in_reception,
  inventory,
  invoice_goods,
  invoices,
  noncompliance_report,
  producers,
  reception_of_goods,
  reception_status,
  sales_floor_income_goods,
  sales_floor_incomes,
  sales_floors,
  storage_spaces,
  storage_types,
  store_category_changes,
  store_local_storage,
  stores,
  subdivisions,
  supply_agreement_goods,
  supply_agreements,
  transportation_document_goods,
  transportation_documents,
  trucks,
}
